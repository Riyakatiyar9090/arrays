class Solution {
public:
    int missingNumber(vector<int>& nums) {
        // sort(nums.begin(),nums.end());
        // for(auto it:nums){
        //     for(int i=1;i<=nums.size();i++){
        //     int r=binary_search(nums.begin(),nums.end(),i);
        //     if(!r)  return i;
        // }
        // }
        // return 0;  
    //     unordered_map<int, int> hash;

    // for (int i = 0; i < nums.size(); i++) {
    //     hash[nums[i]]++;
    // }

    // for (int i = 0; i <= nums.size(); i++) {
    //     if (hash[i] == 0) {
    //         return i;
    //     }
    // }

    // return nums.size() ;
    // optimal
    int xor1=0;
    int xor2=0;
    for(int i=0;i<nums.size();i++){
        xor2=xor2^nums[i];
        xor1=xor1^(i);
    }
    xor1=xor1^nums.size();
    return xor1^xor2;

    }
};
